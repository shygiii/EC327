The technique used in problem 1 can be referred to as "passing by value," which is beneficial since it protects the original data of the Rectangle object and does not directly modify the original variable being referenced. Also, passing by value is faster when small, simple variables are involved. We are not changing the locations of the points for the Rectangle object, but rather, instantiating an entirely new instance of Rectangle with the translated points. Some drawbacks of passing by value are the large performance overhead and difficulty updating data quickly.
Problem 2 employs "pass by reference" and uses a pointer, signified by the asterisk in the parameter *rectangle, to operate on the original Rectangle object being referenced. Because of this, it is easier to directly change and update the fields of this instance of Rectangle (ex. the upperLeft and lowerRight Points) at once. "rectangle" has its upper right point changed, given that the original and final rectangle are not illegal, rather than a new Rectangle object being made. Passing by reference also eliminates the need to return rectangle, and we return a Boolean instead indicating whether or not rectangle was changed. However, if changing the original instance is not desired, then passing by reference can pose more of a drawback than a benefit.